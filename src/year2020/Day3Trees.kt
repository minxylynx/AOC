package year2020

/**
 * NOTES:
 * * added variables to original method to handle mutiple sets of movement and rows down
 * * because I removed the first row to make traversing easier (no counts done on first row), I had to account for the odd remainder on rowDown == 2
 * * the final product of all the counts was bigger than a normal Int (2147483647). it kept giving me a negative number (-1771822592).
 *   ->> So, had to use BigInteger where necessary
 */
class Day3Trees {
    companion object {
        val treeList = mutableListOf(".#.#....##.......#..........#..", "...#...........##...#..#.......", "#.####......##.#...#......#.#..", "##.....#.#.#..#.#............#.", "##.....#....#.........#...##...", "###..#.....#....#..............", "..........#..#.#..#.#....#.....", "##.....#....#.#...#.##.........", "#...#......#....##....#..#.#...", ".##.##...#....##..#.#.....#...#", ".....#.#..........##.#........#", ".##..................#..#..##.#", "#.#..........##....#.####......", ".#......#.#......#.........#...", "#....#..##.##..##........#.#...", "##..#.##..#...#..####.#..#.....", "###....#.###.##...........##..#", ".....#.##.....##.#..#####....##", "....#.###....#..##....##...#...", "..###.#...##.....#.##..#..#.#..", "#...#..#..#.........#..#.......", "##..#.#.....#.#.#.......#...#.#", "...#...##.#........#...#.......", "..#..#.#..#...#...#...........#", "........#.....#......#...##....", "#........##.##.#.#...#...#.....", "####.......#.##.###.#....#.....", "...#...........#...#......#...#", "##...#...#............#.......#", "....#...........##.......#.....", "###......#.....#....#...#.#...#", ".....##..........#.......#.#...", "##.##.##...#......#....#.......", "##..#.#..#......#...#..#.......", "....#....##.##............####.", "..#.###..#.##.###..#.##.......#", "#.##..#.#.....#..#.....##......", "..##..#.....##.#.##........#...", ".#..#.#......#..#............#.", ".....#..#.#...#....#.##.#......", ".#...##.#..#.#...##...##..##...", "###............#.#..#..#...#...", "..#..##.####.#.....#.....##.###", "#....#.##..##....#..#...#.##.#.", ".....#.##.........##...##......", ".........####.#....#.#......#.#", ".........#.#..#...#.#..#.#....#", ".#.....#..##.##..##....#.......", "..........##......#.##.###....#", ".##...###..##.#...#........##..", "..............#.#....#.#.###.##", "..##.##.......#.#......##...#..", ".#.....#..##..#.###...#..#.##.#", "#.....#.#..#...#........#...#..", ".#......#....#.#.....###...#..#", "..##.#....#..##......#.....#...", "..#.#.##..#.....#.####..###....", ".........#......#..#...........", "..#........#.##.#.....##.##..#.", ".......#.........#....#...#.#..", ".##.....#.#....#.#.......#.....", "..........#.##........##...##..", "###..###.#.#..#..#####.##.#.##.", "..##..##.#.#...#..#.#.#......#.", "#..#..#..#..##..#.....#......#.", "..#....#.##..#......##.........", "..#.##......#...##.#......#....", ".......#..#.##.#.....#.........", ".......#.#.#.###...##......#...", ".....#.#..........#..#...#.....", "....##..........#..........##..", "..#......#.....#.##.#..#...#.#.", "....#.....#..#...#..#.#.##..###", ".####....#........#...#........", "...##.#.##.#..#...##...#.##....", "....#...#...#.#.#.#...#..#.....", ".....#...#.#.....#.#........##.", "..#.#.......###.#.....##.......", "......#.........##....#....#..#", ".............##.....##.........", ".........##...##.......#.....#.", "##.........#..........#.###..##", "...#.....#......#....#..##.....", "##..#...#...##.#.....#.#......#", "..#...##.#.......#.#......#.##.", "......#.......#.#...........#..", "..........#.....##............#", "#........#...#..#.......###.##.", ".##...........#.#........#.#.#.", "...#..##...#.#....#####.#......", ".....##...###...#..#.##...####.", "...#....#.....#..#.......#.....", "#....#....#...#..#..#.######..#", "#.###...........#......#...#..#", ".#.#.#.#..#....#....#...##.#...", ".#..#.........#.#....###...#...", "......#..##.##..........#....##", ".....#......##....##.....#...#.", ".#...#.#.#....##....#..#....#.#", "..................#..###.#..##.", "..#.........#......#....#..###.", "#.#.....#..#..#....###..###....", "..##..##.#..##........##...##..", "##..#........##..###..#.....#.#", "..#..###..#......#....#...#...#", "#..#.#..............##.#..#.#..", ".....####....#...####.....#.#..", ".....#....##.#......###........", "##.##...#.#.#.#.......#....##..", ".#......#...#.#....#..##.#.##.#", "#.#.##.#.#......#..##........##", "...##.....#.....#...#..###...#.", "........###.....#.....#...##..#", ".....#.##.##......#.#....#...#.", ".#....##.......#..#.####.......", ".#..#....#..........#......#.#.", ".#.##.##.....###.#.#...........", ".........#......#..##..........", "....#...##.#.#.#..#.#.........#", "..#.....#.##...#..#..#.###....#", "...#.##......#.....##....#.....", "###............#.#....#...#....", ".......#.....#..#.#.#....#..#.#", "...#......#.#..##..#....#...#.#", "............##........##..##...", "..#..#.##..#......###..#.......", "........#.........#............", "..#...#.#########.#...##..###..", "#....#......#.......#.#.....#..", "#.#..#....###.###....#...#.#...", "#...###.#.#.......#.##......#..", ".................#...#.#.#.....", "##....#...#........#....#.#..#.", "......#.....#...#..........#.#.", "##..........#...#..........#.##", "..#.#.##.#....#.#......#...##..", ".....#.......#..#.....#........", "#.##.#..##..#.......##.........", "....#......#..#..#.#...#.......", "...#....#................###...", ".##.....#.#....#.#..........##.", "...#..#....#.##.##......#......", "..#.#....#.......#.#..##.......", "....#.....#..........##.#.#####", "#.....................##..#..#.", ".###..#.##.......##.#...#..#...", "...###.......#..#...#......#..#", "#..#...#.#..#.#..#..#.##.......", "#...##.......#..#..#.##..###...", "......#....#.#.#........#.##..#", "..##..#....#....#..#.#..#......", "..##.#...#.#######..#...#.....#", "..#....#..#.........#..##......", "...#....#.#......#..#..#.#.....", "#..#....#........#.#..##....###", "#....#..##......##.##.....#.###", "...#.#..........#..#.#.#.#.##..", "......##..#.#..#.#....#....#...", "##....#....#..#..#.##......#...", "....#.#..##.#.#...###....##.#..", "...#.......##..#.......#...#...", "......##.......#..##.....#...#.", "...#.#...#...........#...#.....", ".#....#...#......##.##..###..#.", ".#..........#...#...#...##.##..", ".....###..#.....#..##....#.####", "..#.###..#..##..##.....#.#.....", ".............#.###...##.#.....#", "....###.......###.#.....#..#.#.", "........##.#.........#.....###.", ".....###.#..#.....#...#..#.....", ".#....#..##.#..#.#....#.......#", "........#......#.#..#.#..#...##", "...#.##.##......#..............", ".#.....##.#.....#..#......##...", "#..#..#.....#.....#.....###....", ".##...........#..#.##.....#....", "..#.#......#.#...#.##.#..#...##", "...#..........#.....#..........", "#.#.#.#.#...#....#...#.....##..", "#......##...#...#..........#.#.", "....##........#.#..............", "#..#.#.#..#........##......#.##", "........####...##.#.....#......", "....#........#.#..#..##..#.#...", ".#.....#..###...#..#.....#..#..", "#......###.#..#....#..#.#......", "....#.....##.##..#...#.#..##.#.", "..##..#...#.#......#....#...#.#", "#..##...##..#...###...#..#.....", ".......#.....#...........##....", "#..##....#........#....##..#.#.", ".#........#..##...###.#..#.....", ".#.#....#..##...#...##.#..###..", "#.........#.......#.....#.#....", "#..#.....#.#.###.#..#......#...", "....#..#.#....#..##..###....###", "###.##.#.#..#...........#.#.#..", "..##.#.......#......#..##....#.", ".....#.#.#.......##.......#...#", "...........#.##....##.##....#.#", "...#.......#..#.##..#......#..#", "#.#.#...#......##.#...........#", "##........#...........###.#..#.", "..........#.#.#....#.#..##.#.#.", "...#.#.#....#..........#..#....", "#.#....###.#.#..#.......###...#", ".#....#......#.#.#..#..#.......", "......##.............#....#.#.#", ".#..........#.........#.##.....", "##....#....##....#..#.......#..", "#.##.##.#..#..#.....#..#.##.#..", ".#..#.......##..#.....##.##....", ".......#..........#.#.##..#.##.", "....#.....#.#...##....##.......", ".......#.........#...##....##.#", "#.....#......#..........#...#..", "...#.#.......#.#..#....###..#..", ".....#.#.#.........#...........", ".#..###.#.#........#.#.........", ".........#..#......##...##....#", "...###..#.....##.....#.###....#", ".##...#...#........###.#..#....", ".##........#..#.###.######.##.#", "##.#...#.#....#..##.#....##....", ".......##.....##.#..###.#......", "..##...##........#.......#....#", "#..##...#.####...###......#...#", ".##.....#.##.#.#.....###.#..##.", "..###....#.#.###.#....#........", "....#..###..#...#....#..#..#.#.", "#.#.##....##...##.......#......", ".........#...#....#..#.........", ".............#...#..##.#.......", "...#.##.......#...#.#..##.##...", ".####.#.##..#.#......#.##...#.#", ".#..#.#.....#.................#", "..#.##..###....#...#......####.", "..##..##...........#....#...#..", "....#...#...#...#.......#....#.", "#.#...###...#...#.#...#....##.#", "......#...#.#.......#.....#...#", "....##...#.#.#....#....#.#....#", ".....#.....#...##..#...#....##.", "#.....#....#......##.##....#...", "...#.#....#...#....#.#....##..#", "...#.#..#...##....###..#.......", "...##......###...###.#...#..#..", "##.......#.......###.......#..#", "..##.##..###.#............#...#", "#.....##..#..##....##..#.......", "......#.#...#......#.....#.....", "#...........#....#..##.##.#....", ".......#..#......#...#....#...#", ".#...##...........#......#...#.", "#........#....##...###.#....#..", ".....#.......##.........#.##...", ".#.###..#....#..##.#..#.#..#...", "#.......#.##.#.#....#.#..#....#", "###.....#.#.......#..#......#.#", "#..#.#.......#.#..##..##.#.#...", "#..#.#.#.###........#.....#...#", "#.#.#..#..##.....#...........#.", "..#.#..#.....#...#...#...##....", "...#.##......#...##.#...#.#.#.#", "#..#.#.#.#.......####..........", "..#......#.#......##.###.....##", "..#...##..#.........##....#.##.", "##.##.##.#.#.....#..........##.", ".#.....###.#..#....#..#.###...#", "#...##.......###....#.#..#.....", "..#....##.........##.........##", "......#....#.##.......#........", "..#.#.#..#...#...#...##.#...#..", "......#..##.#.#.#...##...#.#.##", "#..#...##.#.....#...#.##.......", "..#..#.........##.#...#.##...##", "##.##.#....#.......#.##..#.....", ".....##...##.##...##.........##", "#......#...#.......#...#...#...", "...##...........#...#..#.......", ".#.##.#..#........#....#.......", "#.#...#..#......##...#.#.##....", "##........####..#.#...#.#.##.##", "#..#.#.##......##.#.#..#.......", ".....#.........#..#.####....#..", "......##..#....#...#.#....#....", "#...##........#.........#.....#", ".#.#...#.#.#..#............##.#", ".#..#....#....#.....#...#.....#", "..###...#..#.....#.##.###...#.#", ".#.###..#..#...#.#...#.#......#", "#...#####......###........##...", ".....#.....#..#.#....#..##.....", "....##...#.#.##.#####...#....#.", ".#.#.........##.#.......#..##..", ".#...#.#...#...#....#.#...##.#.", ".##...#..#.#..#......#.#.#..##.", "..#.....#..#.....##.....#......", "..#........#..##...#.......###.", ".#....#.......#....#....#..#...", "....#......#.#.#.........#.....", "..##...#.#.#...#.#........#....", ".#.....####...##.#..#...##.....", "...#.....#...#...#....#....#...", ".........#..#.#.....#..#.#..#..", ".........##...........#.......#", "......#..#.....##...#.##.#.....", ".#......##........##...#.#.##..", ".....#.#..##...........#..#..#.", "...#.......#...#.#..#.##..#.##.", "...#.......#.....#.#...#.##.#..", "#.....#.............##.#..####.", ".#...#......#...##.#....#.#....", ".##..##.##....#.#.....#.......#", "...#...#....#....##.#..#....##.", "..............##....#.......#.#", ".#.#.#...##..#..#...###.#..#...", ".#.#...#.#..#.#..#...######..#.", "........#......#.#..#.#....#...", "..###.....###.#.##....#...##...", ".##.#.....#.......##.......#...", "..#..##...#..........#.#....#.#")

        fun treeCount(movementRight: Int, rowDown: Int): Int {
            var treeCounter = 0
            val repeat = treeList.size.div(treeList[0].length).plus(1).times(movementRight)
            var index = 0
            treeList.map { row -> row.repeat(repeat) }.drop(1)
                .forEachIndexed { i, row ->
                    if ( rowDown == 1 || i % rowDown == 1) {
                        if (row[index + movementRight].equals('#', true)) treeCounter++
                        index += movementRight
                    }
                }

            return treeCounter.also { println("$movementRight, $rowDown = $it")}
        }

        fun treeCountMore() {
            val inputs = listOf(Pair(1, 1), Pair(3, 1), Pair(5, 1), Pair(7, 1), Pair(1, 2))

            inputs.map { input -> treeCount(input.first, input.second).toBigInteger() }
                .also { println(it) }
                .reduce { acc, bigInteger -> acc * bigInteger }
                .also { println("product $it") }
        }

            // Checking my work cuz i didnt know why it was giving me a negative number originally
//            val list = listOf(84, 228, 89, 100, 40)
//            var runningProduct = 1
//            list.forEachIndexed { index, i ->
//                val product = runningProduct * list[index]
//                println("${runningProduct} * ${list[index]} = $product")
//                runningProduct *= list[index]
//            }

    }

}
